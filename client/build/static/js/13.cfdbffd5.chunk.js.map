{"version":3,"sources":["components/FormContainer.js","screens/UserEditScreen.js"],"names":["FormContainer","children","className","xs","md","UserEditScreen","match","history","useState","name","setName","email","setEmail","isAdmin","setIsAdmin","dispatch","useDispatch","useSelector","state","userDetail","user","loading","error","userUpdate","successUpdate","success","loadingUpdate","errorUpdate","userId","params","id","useEffect","type","USER_UPDATE_RESET","push","_id","getUserDetail","to","variant","onSubmit","e","preventDefault","updateUser","Group","controlId","Label","Control","placeholder","value","onChange","target","Check","label","checked"],"mappings":"mGAAA,0CAeeA,IAZO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,UAAU,4BAAf,SACE,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACGH,U,2IC0FII,UAvFQ,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAAc,EACrBC,mBAAS,IADY,mBACtCC,EADsC,KAChCC,EADgC,OAEnBF,mBAAS,IAFU,mBAEtCG,EAFsC,KAE/BC,EAF+B,OAGfJ,oBAAS,GAHM,mBAGtCK,EAHsC,KAG7BC,EAH6B,KAKvCC,EAAWC,cAL4B,EAMZC,aAAY,SAACC,GAAD,OAAWA,EAAMC,cAAtDC,EANqC,EAMrCA,KAAMC,EAN+B,EAM/BA,QAASC,EANsB,EAMtBA,MANsB,EAWzCL,aAAY,SAACC,GAAD,OAAWA,EAAMK,cAHtBC,EARkC,EAQ3CC,QACSC,EATkC,EAS3CL,QACOM,EAVoC,EAU3CL,MAGIM,EAAStB,EAAMuB,OAAOC,GAE5BC,qBAAU,WACJP,GACFT,EAAS,CAAEiB,KAAMC,OACjB1B,EAAQ2B,KAAK,oBAERd,EAAKX,MAAQW,EAAKe,MAAQP,GAG7BlB,EAAQU,EAAKX,MACbG,EAASQ,EAAKT,OACdG,EAAWM,EAAKP,UAJhBE,EAASqB,YAAcR,MAO1B,CAACrB,EAASiB,EAAeT,EAAUa,EAAQR,IAO9C,OACE,qCACE,cAAC,OAAD,CAAMiB,GAAG,kBAAkBnC,UAAU,qBAArC,qBAGA,eAAC,IAAD,WACE,2CACCwB,GAAiB,cAAC,IAAD,IACjBC,GAAe,cAAC,IAAD,CAASW,QAAQ,SAAjB,SAA2BX,IAC1CN,EACC,cAAC,IAAD,IACEC,EACF,eAAC,IAAD,CAASgB,QAAQ,SAAjB,UAA2BhB,EAA3B,OAEA,eAAC,IAAD,CAAMiB,SAnBQ,SAACC,GACrBA,EAAEC,iBACF1B,EAAS2B,YAAW,CAAEP,IAAKP,EAAQnB,OAAME,QAAOE,cAiB1C,UACE,eAAC,IAAK8B,MAAN,CAAYC,UAAU,OAAtB,UACE,cAAC,IAAKC,MAAN,mBACA,cAAC,IAAKC,QAAN,CACEd,KAAK,OACLe,YAAY,aACZC,MAAOvC,EACPwC,SAAU,SAACT,GAAD,OAAO9B,EAAQ8B,EAAEU,OAAOF,aAGtC,eAAC,IAAKL,MAAN,CAAYC,UAAU,QAAtB,UACE,cAAC,IAAKC,MAAN,4BACA,cAAC,IAAKC,QAAN,CACEd,KAAK,QACLe,YAAY,cACZC,MAAOrC,EACPsC,SAAU,SAACT,GAAD,OAAO5B,EAAS4B,EAAEU,OAAOF,aAGvC,cAAC,IAAKL,MAAN,CAAYC,UAAU,UAAtB,SACE,cAAC,IAAKO,MAAN,CACEnB,KAAK,WACLoB,MAAM,WACNC,QAASxC,EACToC,SAAU,SAACT,GAAD,OAAO1B,EAAW0B,EAAEU,OAAOG,cAIzC,cAAC,IAAD,CAAQrB,KAAK,SAASM,QAAQ,UAA9B","file":"static/js/13.cfdbffd5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nconst FormContainer = ({ children }) => {\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-md-center\">\r\n        <Col xs={12} md={6}>\r\n          {children}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FormContainer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Form } from 'react-bootstrap';\r\n\r\nimport FormContainer from '../components/FormContainer';\r\nimport { getUserDetail, updateUser } from '../store/actions/userActions';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport { USER_UPDATE_RESET } from '../store/actions/actionTypes';\r\n\r\nconst UserEditScreen = ({ match, history }) => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const { user, loading, error } = useSelector((state) => state.userDetail);\r\n  const {\r\n    success: successUpdate,\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n  } = useSelector((state) => state.userUpdate);\r\n\r\n  const userId = match.params.id;\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: USER_UPDATE_RESET });\r\n      history.push('/admin/userlist');\r\n    } else {\r\n      if (!user.name || user._id !== userId) {\r\n        dispatch(getUserDetail(userId));\r\n      } else {\r\n        setName(user.name);\r\n        setEmail(user.email);\r\n        setIsAdmin(user.isAdmin);\r\n      }\r\n    }\r\n  }, [history, successUpdate, dispatch, userId, user]);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateUser({ _id: userId, name, email, isAdmin }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/admin/userlist\" className=\"btn btn-light my-3\">\r\n        Go Back\r\n      </Link>\r\n      <FormContainer>\r\n        <h1>Edit User</h1>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message variant=\"danger\">{error} </Message>\r\n        ) : (\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"name\"\r\n                placeholder=\"Enter name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email Address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"isadmin\">\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label=\"Is Admin\"\r\n                checked={isAdmin}\r\n                onChange={(e) => setIsAdmin(e.target.checked)}\r\n              ></Form.Check>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\" variant=\"primary\">\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserEditScreen;\r\n"],"sourceRoot":""}