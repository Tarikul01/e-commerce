{"version":3,"sources":["components/FormContainer.js","screens/ProductEditScreen.js"],"names":["FormContainer","children","className","xs","md","ProductEditScreen","match","history","useState","name","setName","price","setPrice","image","setImage","brand","setBrand","category","setCategory","countInStock","setCountInStock","description","setDescription","uploading","setUploading","dispatch","useDispatch","useSelector","state","productDetail","product","loading","error","productUpdate","successUpdate","success","loadingUpdate","errorUpdate","productId","params","id","useEffect","type","PRODUCT_UPDATE_RESET","push","_id","listProductDetail","uploadFileHandler","e","a","file","target","files","formData","FormData","append","config","headers","axios","post","data","console","to","variant","onSubmit","preventDefault","updateProduct","Group","controlId","Label","Control","placeholder","value","onChange","File","label","custom"],"mappings":"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","file":"static/js/11.12860359.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nconst FormContainer = ({ children }) => {\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-md-center\">\r\n        <Col xs={12} md={6}>\r\n          {children}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FormContainer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Form } from 'react-bootstrap';\r\n\r\nimport FormContainer from '../components/FormContainer';\r\nimport {\r\n  listProductDetail,\r\n  updateProduct,\r\n} from '../store/actions/productActions';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport { PRODUCT_UPDATE_RESET } from '../store/actions/actionTypes';\r\nimport axios from 'axios';\r\n\r\nconst ProductEditScreen = ({ match, history }) => {\r\n  const [name, setName] = useState('');\r\n  const [price, setPrice] = useState(0);\r\n  const [image, setImage] = useState('');\r\n  const [brand, setBrand] = useState('');\r\n  const [category, setCategory] = useState('');\r\n  const [countInStock, setCountInStock] = useState(0);\r\n  const [description, setDescription] = useState('');\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const { product, loading, error } = useSelector(\r\n    (state) => state.productDetail\r\n  );\r\n  const {\r\n    success: successUpdate,\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n  } = useSelector((state) => state.productUpdate);\r\n\r\n  const productId = match.params.id;\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: PRODUCT_UPDATE_RESET });\r\n      history.push('/admin/productlist');\r\n    } else {\r\n      if (!product.name || product._id !== productId) {\r\n        dispatch(listProductDetail(productId));\r\n      } else {\r\n        setName(product.name);\r\n        setPrice(product.price);\r\n        setImage(product.image);\r\n        setBrand(product.brand);\r\n        setCategory(product.category);\r\n        setCountInStock(product.countInStock);\r\n        setDescription(product.description);\r\n      }\r\n    }\r\n  }, [successUpdate, history, dispatch, productId, product]);\r\n\r\n  const uploadFileHandler = async (e) => {\r\n    const file = e.target.files[0];\r\n    const formData = new FormData();\r\n    formData.append('image', file);\r\n    setUploading(true);\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data', //content type is must while uploading\r\n        },\r\n      };\r\n      const { data } = await axios.post('/api/upload', formData, config);\r\n      setImage(data);\r\n      setUploading(false);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setUploading(false);\r\n    }\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    //UPDATE PRODUCT\r\n    dispatch(\r\n      updateProduct({\r\n        _id: productId,\r\n        name,\r\n        price,\r\n        image,\r\n        brand,\r\n        category,\r\n        description,\r\n        countInStock,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Link to=\"/admin/productlist\" className=\"btn btn-light my-3\">\r\n        Go Back\r\n      </Link>\r\n      <FormContainer>\r\n        <h1>Edit Product</h1>\r\n        {loadingUpdate && <Loader />}\r\n        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\r\n        {loading ? (\r\n          <Loader />\r\n        ) : error ? (\r\n          <Message variant=\"danger\">{error} </Message>\r\n        ) : (\r\n          <Form onSubmit={submitHandler}>\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"name\"\r\n                placeholder=\"Enter name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"price\">\r\n              <Form.Label>Price</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Enter price\"\r\n                value={price}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"image\">\r\n              <Form.Label>Image</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter image url\"\r\n                value={image}\r\n                onChange={(e) => setImage(e.target.value)}\r\n              ></Form.Control>\r\n              <Form.File\r\n                id=\"image-file\"\r\n                label=\"Choose File\"\r\n                custom\r\n                onChange={uploadFileHandler}\r\n              ></Form.File>\r\n              {uploading && <Loader />}\r\n            </Form.Group>\r\n            <Form.Group controlId=\"brand\">\r\n              <Form.Label>Image</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter brand\"\r\n                value={brand}\r\n                onChange={(e) => setBrand(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"countInStock\">\r\n              <Form.Label>Count In Stock</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Enter count in stock\"\r\n                value={countInStock}\r\n                onChange={(e) => setCountInStock(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"category\">\r\n              <Form.Label>Category</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter category\"\r\n                value={category}\r\n                onChange={(e) => setCategory(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"description\">\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter description\"\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n            <Button type=\"submit\" variant=\"primary\">\r\n              Update\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </FormContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductEditScreen;\r\n"],"sourceRoot":""}